{"version":3,"sources":["components/card/index.jsx","components/loader/index.jsx","components/mainpage/index.jsx","components/scrolltotop/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","data","setSearchData","className","div","animate","x","opacity","whileHover","scale","transition","duration","img","src","photos","alt","href","url","title","description","tags","map","tag","i","onClick","e","console","log","target","value","window","scrollTo","top","behavior","name","key","slice","photo","y","ease","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","Loader","options","height","width","GET_TRIPS","gql","MainPage","searchData","useQuery","variables","keyword","loading","error","trips","length","trip","idx","ScrollButton","useState","visible","setVisible","addEventListener","toggleVisible","scrolled","document","documentElement","scrollTop","scrollToTop","style","display","App","h3","input","type","placeholder","onChange","handleChange","event","preventDefault","Boolean","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","message"],"mappings":"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","file":"static/js/main.5159fd13.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.scss\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\nfunction Card({ data, setSearchData }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <motion.div\r\n        animate={{ x: [-20, 0], opacity: [0, 1] }}\r\n        whileHover={{scale:1.03}}\r\n        transition={{ duration: 0.7 }}\r\n        className=\"left-img\"\r\n      >\r\n        <motion.img  src={data.photos[0]} alt=\"img\" />\r\n      </motion.div>\r\n\r\n      <motion.div\r\n        animate={{ x: [15, 0], opacity: [0, 1] }}\r\n        transition={{ duration: 1.3 }}\r\n        className=\"right\"\r\n      >\r\n        <div className=\"title\">\r\n          <a href={data.url}>\r\n            <h4>{data.title}</h4>\r\n          </a>\r\n        </div>\r\n\r\n        <div className=\"desc\">\r\n          <p>{data.description}</p>\r\n          <a href={data.url}>อ่านต่อ...</a>\r\n        </div>\r\n        <div className=\"tags\">\r\n          <h2>หมวด</h2>\r\n          {data.tags.map((tag, i) => (\r\n            <>\r\n              <p\r\n                onClick={(e) => {\r\n                  setSearchData(tag);\r\n                  console.log(e.target.value)\r\n                  window.scrollTo({\r\n                    top: 0,\r\n                    behavior: \"smooth\",\r\n                  });\r\n                }}\r\n                name={tag}\r\n                value={tag}\r\n                key={i}\r\n              >\r\n                {tag}\r\n              </p>\r\n            </>\r\n          ))}\r\n        </div>\r\n        <div className=\"images\">\r\n          {data.photos.slice(1, 4).map((photo, i) => (\r\n            <motion.div\r\n              className=\"image\"\r\n              animate={{ y: [i * 50, 0], scale: [0.65, 1], opacity: [0, 1] }}\r\n              transition={{ duration: 1.5, ease: \"easeOut\" }}\r\n            >\r\n              <img src={photo} alt={photo} />\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import Lottie from \"react-lottie\";\r\nimport * as loading from \"./loader.json\";\r\nimport React from \"react\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\n\r\n\r\nconst defaultOptions = {\r\n  loop: true,\r\n  autoplay: true,\r\n  animationData: loading.default,\r\n  rendererSettings: {\r\n    preserveAspectRatio: \"xMidYMid slice\",\r\n  },\r\n};\r\n\r\nexport default function Loader() {\r\n  return (\r\n    \r\n      <motion.div animate={{ opacity: [0, 1] }} >\r\n        <Lottie options={defaultOptions} height={250} width={250} />\r\n      </motion.div>\r\n    \r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Card from \"../card\";\r\nimport \"./mainpage.scss\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\";\r\nimport Loader from \"../loader/index\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\nconst GET_TRIPS = gql`\r\n  #define GQL Query\r\n  query GET_TRIPS($keyword: String!) {\r\n    trips(keyword: $keyword) {\r\n      eid\r\n      title\r\n      url\r\n      description\r\n      photos\r\n      tags\r\n    }\r\n  }\r\n`;\r\nexport default function MainPage({ searchData, setSearchData }) {\r\n  //Query trips\r\n  const { data, loading, error } = useQuery(GET_TRIPS, {\r\n    variables: { keyword: searchData },\r\n  });\r\n\r\n  if (error) return \"something wentworng\";\r\n  if (loading) return null;\r\n  const { trips } = data;\r\n\r\n  const shortcutKeywords = [\r\n    \"คาเฟ่\",\r\n    \"ร้านกาแฟ\",\r\n    \"จุดถ่ายรูป\",\r\n    \"ต่างประเทศ\",\r\n    \"กรุงเทพมหานคร\",\r\n    \"ทะเล\",\r\n    \"เกาะ\",\r\n    \"ภูเขา\",\r\n  ];\r\n  return (\r\n    <motion.div\r\n      animate={{ opacity: [0, 1] }}\r\n      transition={{ duration: 2.5, ease: \"easeOut\" }}\r\n      className=\"mainpage\"\r\n    >\r\n      <div className=\"content\">\r\n        {trips.length === 0 && (\r\n          <>\r\n            <div className=\"modal-notfound\">\r\n              <Loader></Loader>\r\n              <h2>ไม่พบทริปที่ตรงกับข้อความที่กรอกมา! โปรดลองไหม่อีกครั้ง </h2>\r\n              <div className=\"shortcut-keyword\">\r\n                <h4> ค้นหาทันใจ : </h4>\r\n                {shortcutKeywords.map((keyword, i) => (\r\n                  <div className=\"keyword\">\r\n                    <p\r\n                      onClick={(e) => {\r\n                        setSearchData(keyword);\r\n                        console.log(e.target.value);\r\n                        window.scrollTo({\r\n                          top: 0,\r\n                          behavior: \"smooth\",\r\n                        });\r\n                      }}\r\n                    >\r\n                      {keyword}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n        {trips.map((trip, idx) => (\r\n          //display card of content\r\n          <div key={idx}>\r\n            <Card key={idx} data={trip} setSearchData={setSearchData}></Card>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { FaArrowCircleUp } from \"react-icons/fa\";\r\nimport \"./scrolltotop.scss\"\r\n\r\nconst ScrollButton = () => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const toggleVisible = () => {\r\n    const scrolled = document.documentElement.scrollTop;\r\n    if (scrolled > 300) {\r\n      setVisible(true);\r\n    } else if (scrolled <= 300) {\r\n      setVisible(false);\r\n    }\r\n  };\r\n\r\n   const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n      /* you can also use 'auto' behaviour\r\n         in place of 'smooth' */\r\n    });\r\n  };\r\n\r\n  window.addEventListener(\"scroll\", toggleVisible);\r\n\r\n  return (\r\n    <div className=\"scroll-btn\">\r\n      <FaArrowCircleUp\r\n        onClick={scrollToTop}\r\n        style={{ display: visible ? \"inline\" : \"none\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollButton;\r\n","import React, { useState } from \"react\";\nimport MainPage from \"./components/mainpage\";\nimport ScrollButton from \"./components/scrolltotop\";\n\nimport \"./app.scss\";\nimport { motion } from \"framer-motion/dist/framer-motion\";\nfunction App() {\n  const [searchData, setSearchData] = useState(\"\");\n  function handleChange(event) {\n    event.preventDefault();\n    setSearchData(event.target.value);\n  }\n  return (\n    <div className=\"App\">\n      <motion.h3 animate={{ opacity: [0, 1] }}>เที่ยวไหนดี</motion.h3>\n\n      <div className=\"input-area\">\n        <motion.input\n          animate={{ opacity: [0, 1] }}\n          type=\"text\"\n          placeholder={\"หาที่เที่ยวแล้วไปกัน..\"}\n          name=\"input\"\n          onChange={handleChange}\n          value={searchData}\n        />\n        {searchData ? (\n          <div onClick={() => setSearchData(\"\")} className=\"clear-input\">\n            <p>X</p>{\" \"}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <MainPage searchData={searchData} setSearchData={setSearchData} />\n      <ScrollButton></ScrollButton>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4444/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}